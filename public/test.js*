 document.addEventListener('DOMContentLoaded', function() {
        const loadEl = document.querySelector('#load');
        // // 🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥
        // // The Firebase SDK is initialized and available here!
        //
        // firebase.auth().onAuthStateChanged(user => { });
        // firebase.database().ref('/path/to/ref').on('value', snapshot => { });
        // firebase.firestore().doc('/foo/bar').get().then(() => { });
        // firebase.functions().httpsCallable('yourFunction')().then(() => { });
        // firebase.messaging().requestPermission().then(() => { });
        // firebase.storage().ref('/path/to/ref').getDownloadURL().then(() => { });
        // firebase.analytics(); // call to activate
        // firebase.analytics().logEvent('tutorial_completed');
        // firebase.performance(); // call to activate
        //
        // // 🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥

        // Обработка отправки формы
    const form = document.getElementById('dataForm');
       const dataList = document.getElementById('dataList');

       const editPopup = document.getElementById('editPopup');
    const saveEditBtn = document.getElementById('saveEditBtn');
    const closePopupBtn = document.getElementById('closePopupBtn');
    let selectedKey = null;


    form.addEventListener('submit', function(event) {
      event.preventDefault();

      // Получение данных из формы


      // Получение данных из формы
      const name = document.getElementById('name').value;
      const age = document.getElementById('age').value;
      const email = document.getElementById('email').value;

       if (selectedKey) {
        updateDataInFirebase(selectedKey, { name, age, email });
        editPopup.style.display = 'none';
        selectedKey = null;
      } else {
        sendDataToFirebase({ name, age, email });
      }
      // Очистка полей формы после отправки
      form.reset();
    });

    // Функция для отправки данных в Firebase
    function sendDataToFirebase(data) {
      const dataRef = firebase.database().ref('/realsoft/users'); // Замените 'users' на ваш путь в базе данных

      // Пуш новых данных в базу
      dataRef.push(data)
        .then(() => {
          alert('Данные успешно отправлены в Firebase!');
        })
        .catch(error => {
          console.error('Ошибка отправки данных:', error);
        });
    }


      // Получение данных из Firebase и вывод на страницу
    const dataRef = firebase.database().ref('/realsoft/users'); // Замените 'users' на ваш путь в базе данных

    dataRef.on('child_added', snapshot => {
      const data = snapshot.val();
      const key = snapshot.key;
      const ref = snapshot.ref;
      viewlist(key, data, ref);
      
    });


    function viewlist(key, data,ref){

      const listItem = document.createElement('li');
      listItem.setAttribute('data-key', key);
      listItem.innerText = `Имя: ${data.name}, Возраст: ${data.age}, Email: ${data.email}`;
      

      // Создание кнопок для управления записями
      const editButton = document.createElement('button');
      editButton.innerText = 'Изменить';
      editButton.onclick = function() {
        // Заполнение попапа данными из записи
        document.getElementById('editName').value = data.name;
        document.getElementById('editAge').value = data.age;
        document.getElementById('editEmail').value = data.email;
        editPopup.style.display = 'block';
        
        // Сохранение ключа записи для редактирования
        selectedKey = key;
      };


      // Создание кнопки удаления для каждой записи
      const deleteButton = document.createElement('button');
      deleteButton.innerText = 'Удалить';
      deleteButton.onclick = function() {
       ref.remove()
          .then(() => {
            alert('Запись успешно удалена из Firebase!');
          })
          .catch(error => {
            console.error('Ошибка удаления записи:', error);
          });
      };

      listItem.appendChild(editButton);
      listItem.appendChild(deleteButton);
      dataList.appendChild(listItem);

}

    // Обработка сохранения изменений в попапе
    saveEditBtn.addEventListener('click', function() {
      const newName = document.getElementById('editName').value;
      const newAge = document.getElementById('editAge').value;
      const newEmail = document.getElementById('editEmail').value;

      // Обновление данных в Firebase
      if (selectedKey) {
        updateDataInFirebase(selectedKey, { name: newName, age: newAge, email: newEmail });
        editPopup.style.display = 'none';
        selectedKey = null;
      }
    });

    // Функция для обновления данных в Firebase
    function updateDataInFirebase(key, newData) {
      const dataRef = firebase.database().ref(`/realsoft/users/${key}`); // Замените 'users' на ваш путь в базе данных

      // Обновление данных
      dataRef.update(newData)
        .then(() => {

          // Обновление элемента списка после обновления данных
          const updatedItem = dataList.querySelector(`[data-key="${key}"]`);
          if (updatedItem) {
            updatedItem.remove();
          }
          alert('Данные успешно обновлены в Firebase!');
        })
        .catch(error => {
          console.error('Ошибка обновления данных:', error);
        });
    }


  dataRef.on('child_changed', snapshot => {

      const data = snapshot.val();
      const key = snapshot.key;
      const ref = snapshot.ref;
      viewlist(key, data, ref);
});

    // Обработка закрытия попапа
    closePopupBtn.addEventListener('click', function() {
      editPopup.style.display = 'none';
      selectedKey = null;
    });

    // Обновление списка после удаления записи
    dataRef.on('child_removed', snapshot => {
      const deletedItem = dataList.querySelector(`[data-key="${snapshot.key}"]`);
      if (deletedItem) {
        deletedItem.remove();
      }
    });






        try {
          let app = firebase.app();
          let features = [
            'auth', 
            'database', 
            'firestore',
            'functions',
            'messaging', 
            'storage', 
            'analytics', 
            'remoteConfig',
            'performance',
          ].filter(feature => typeof app[feature] === 'function');
          loadEl.textContent = `Firebase SDK loaded with ${features.join(', ')}`;
        } catch (e) {
          console.error(e);
          loadEl.textContent = 'Error loading the Firebase SDK, check the console.';
        }
      });